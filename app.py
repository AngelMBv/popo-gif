# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SGluYi8MRycRgmxZ43gri-ixuk6kHC6e
"""

from flask import Flask, send_file
import os, glob, requests, threading, time
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import imageio.v2 as imageio

# Configuración
IMAGES_DIR = "imagenes_combinadas"
COMPOSITE_DIR = "imagenes_temp"
GIF_PATH = "popocatepetl.gif"
MAX_IMAGES = 2
INTERVALO_SEGUNDOS = 10  # cada 5 minutos

POPO_LAT, POPO_LON = 19.023, -98.622
LON_MIN, LON_MAX = -118, -82
LAT_MIN, LAT_MAX = 8, 38
IMG_WIDTH, IMG_HEIGHT = 4000, 4000
GRID_N = 20
DX = IMG_WIDTH // GRID_N
DY = IMG_HEIGHT // GRID_N

app = Flask(__name__)

def geo_to_pixel(lat, lon):
    x = int((lon - LON_MIN) / (LON_MAX - LON_MIN) * IMG_WIDTH)
    y = int((LAT_MAX - lat) / (LAT_MIN - LAT_MAX) * IMG_HEIGHT)
    return x, y

def create_directories():
    os.makedirs(IMAGES_DIR, exist_ok=True)
    os.makedirs(COMPOSITE_DIR, exist_ok=True)

def download_images():
    timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    base = os.path.join(COMPOSITE_DIR, timestamp)
    os.makedirs(base, exist_ok=True)
    urls = {
        "B02": "https://cdn.star.nesdis.noaa.gov/GOES19/ABI/SECTOR/mex/02/latest.jpg",
        "B07": "https://cdn.star.nesdis.noaa.gov/GOES19/ABI/SECTOR/mex/07/latest.jpg",
        "B06": "https://cdn.star.nesdis.noaa.gov/GOES19/ABI/SECTOR/mex/06/latest.jpg",
    }
    paths = []
    for n, u in urls.items():
        try:
            r = requests.get(u, timeout=10); r.raise_for_status()
            p = os.path.join(base, f"{n}.jpg")
            with open(p, "wb") as f:
                f.write(r.content)
            paths.append(p)
        except Exception as e:
            print(f"Error descargando {n}: {e}")
    return paths, timestamp

def draw_grid(base):
    draw = ImageDraw.Draw(base)
    font = ImageFont.load_default()
    for i in range(1, GRID_N):
        draw.line([(i*DX, 0), (i*DX, IMG_HEIGHT)], fill="white")
        draw.line([(0, i*DY), (IMG_WIDTH, i*DY)], fill="white")
    for y in range(GRID_N):
        for x in range(GRID_N):
            draw.text((x*DX+5, y*DY+5), f"({x},{y})", fill="yellow", font=font)

def mark_and_crop(paths, ts):
    base = Image.open(paths[0]).convert("RGBA")
    for p in paths[1:]:
        lay = Image.open(p).convert("RGBA")
        lay.putalpha(80)
        base = Image.alpha_composite(base, lay)

    # Rejilla
    grid = base.copy()
    draw_grid(grid)
    grid.save(os.path.join(IMAGES_DIR, f"grid_{ts}.png"))

    # Cruz roja
    px, py = geo_to_pixel(POPO_LAT, POPO_LON)
    draw = ImageDraw.Draw(base)
    draw.line([(px, 0), (px, IMG_HEIGHT)], fill="red")
    draw.line([(0, py), (IMG_WIDTH, py)], fill="red")
    base.save(os.path.join(IMAGES_DIR, f"full_{ts}.png"))

    # Recorte
    box = (10 * DX, 11 * DY, 12 * DX, 12 * DY)
    crop = base.crop(box)
    cp = os.path.join(IMAGES_DIR, f"crop_{ts}.png")
    crop.save(cp)
    return cp

def cleanup_old():
    lst = sorted(glob.glob(os.path.join(IMAGES_DIR, "crop_*.png")))
    for f in lst[:-MAX_IMAGES]:
        os.remove(f)

def generate_gif():
    lst = sorted(glob.glob(os.path.join(IMAGES_DIR, "crop_*.png")))
    if len(lst) >= MAX_IMAGES:
        frames = [imageio.imread(f) for f in lst]
        pingpong = frames + frames[::-1][1:-1]
        imageio.mimsave(GIF_PATH, pingpong, duration=1, loop=0)
        print(f"[GIF] Generado con {len(frames)} imágenes.")
        return True
    return False

def ciclo_generador():
    while True:
        print("[CICLO] Descargando y procesando imágenes...")
        create_directories()
        paths, ts = download_images()
        if paths:
            mark_and_crop(paths, ts)
            cleanup_old()
            generate_gif()
        else:
            print("[ERROR] No se descargaron imágenes")
        time.sleep(INTERVALO_SEGUNDOS)

@app.route("/gif")
def obtener_gif():
    if os.path.exists(GIF_PATH):
        return send_file(GIF_PATH, mimetype="image/gif")
    return "GIF no generado aún", 404

if __name__ == "__main__":
    # Inicia hilo en segundo plano para generar el gif
    hilo = threading.Thread(target=ciclo_generador, daemon=True)
    hilo.start()

    # Ejecuta Flask
    app.run(host="0.0.0.0", port=5000)
